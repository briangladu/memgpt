[tool.poetry]
name = "pymemgpt"
version = "0.3.5"
packages = [
    {include = "memgpt"}
]
description = "Teaching LLMs memory management for unbounded context"
authors = [
    "MemGPT Team <hi@memgpt.ai>",
]
license = "Apache License"
readme = "README.md"

[tool.poetry.scripts]
memgpt = "memgpt.main:app"

[tool.poetry.dependencies]
python = "<3.12,>=3.10"
typer = {extras = ["all"], version = "^0.9.0"}
questionary = "^2.0.1"
pytz = "^2023.3.post1"
tqdm = "^4.66.1"
black = {extras = ["jupyter"], version = "^24.2.0"}
pytest = { version = "^7.4.4", optional = true }
setuptools = "^68.2.2"
pgvector = { version = "^0.2.3", optional = true }
pre-commit = {version = "^3.5.0", optional = true }
pg8000 = {version = "^1.30.3", optional = true}
docstring-parser = "^0.15"
httpx = "^0.25.2"
numpy = "^1.26.2"
demjson3 = "^3.0.6"
tiktoken = "^0.5.1"
pyyaml = "^6.0.1"
sqlalchemy-json = "^0.7.0"
fastapi = {version = "^0.104.1"}
pydantic = "^2.5.2"
sqlalchemy = "^2.0.25"
pyright = {version = "^1.1.347", optional = true}
python-box = "^7.1.1"
sqlmodel = "^0.0.16"
autoflake = {version = "^2.3.0", optional = true}
llama-index = "^0.10.6"
llama-index-embeddings-openai = "^0.1.1"

[tool.poetry.extras]
postgres = ["pgvector", "pg8000"]
dev = ["pytest", "pytest-asyncio", "black", "pre-commit", "datasets", "pyright", "pytest-order", "autoflake"]

[tool.black]
line-length = 140
target-version = ['py310', 'py311']

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
